using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MoreAsyncLINQ
{
    static partial class MoreAsyncEnumerable
    {
        /// <summary>
        /// Returns a sequence generated by applying a state to the generator function,
        /// and from its result, determines if the sequence should have a next element, its value,
        /// and the next state in the recursive call.
        /// </summary>
        /// <typeparam name="TState">Type of state elements.</typeparam>
        /// <typeparam name="T">Type of the elements generated by the generator function.</typeparam>
        /// <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
        /// <param name="state">The initial state.</param>
        /// <param name="generator">
        /// Function that takes a state and computes the next state and the next element of the sequence.
        /// </param>
        /// <param name="predicate">
        /// Function to determine if the unfolding should continue based the
        /// result of the <paramref name="generator"/> function.
        /// </param>
        /// <param name="stateSelector">
        /// Function to select the state from the output of the <paramref name="generator"/> function.
        /// </param>
        /// <param name="resultSelector">
        /// Function to select the result from the output of the <paramref name="generator"/> function.
        /// </param>
        /// <returns>A sequence containing the results generated by the <paramref name="resultSelector"/> function.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>
        public static IAsyncEnumerable<TResult> UnfoldAwait<TState, T, TResult>(
            TState state,
            Func<TState, ValueTask<T>> generator,
            Func<T, ValueTask<bool>> predicate,
            Func<T, ValueTask<TState>> stateSelector,
            Func<T, ValueTask<TResult>> resultSelector)
        {
            if (generator is null) throw new ArgumentNullException(nameof(generator));
            if (predicate is null) throw new ArgumentNullException(nameof(predicate));
            if (stateSelector is null) throw new ArgumentNullException(nameof(stateSelector));
            if (resultSelector is null) throw new ArgumentNullException(nameof(resultSelector));

            return Core(state, generator, predicate, stateSelector, resultSelector);

            static async IAsyncEnumerable<TResult> Core(
                TState state,
                Func<TState, ValueTask<T>> generator,
                Func<T, ValueTask<bool>> predicate,
                Func<T, ValueTask<TState>> stateSelector,
                Func<T, ValueTask<TResult>> resultSelector)
            {
                while (true)
                {
                    var element = await generator(state).ConfigureAwait(false);
                    if (!await predicate(element).ConfigureAwait(false))
                    {
                        yield break;
                    }

                    yield return await resultSelector(element).ConfigureAwait(false);
                    
                    state = await stateSelector(element).ConfigureAwait(false);
                }
            }
        }
    }
}